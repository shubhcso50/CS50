0.  An invented long word said to mean a lung disease caused by inhaling very fine ash and sand dust.
1.  getrusage returns resource usage measures for "int who", which is always RUSAGE_SELF in speller.c. 
    Specifying RUSAGE_SELF returns resource usage statistics for the calling process, which is the sum 
    of resources used by all threads in the process
2.  16
3.  We pass before and after by reference (instead of by value) to the function "calculate" because passing 
    large structs by value is slow and takes up a lot of memory. If you're passing or returning structs by 
    value, copies of those structs will get placed on the stack, potentially causing stack overflow.
4.  The key aspect of the for loop is the c = fgetc(fp) function call. fgetc gets the next character 
    (an unsigned char) from fp and advances the position indicator in fp until the end of the file (EOF) is reached. 
    As each character is received, it is put through an if(if)-elseif-elseif logical sequence. 
    Summarizing the sequence: 1) If the character is an alphabetical character or an apostrophe that is not at
    index 0 of the word, the character is appended to the word array. 2) Else if the character is numerical, the word 
    is ignored and we skip ahead to the next word (which is found after a space). 3) Else if we hit a space or 
    punctuation, we must have found a whole word so we terminate the word by adding \0 to the word array.
5.  fscanf with a format string like "%s" will read subsequent characters until a whitespace is found 
    (whitespace characters are considered to be blank, newline and tab). Because words within the txt files sometimes 
    end with punctuation, fscanf will view them as being part of the word, which complicates the reading procedure.
    In addition, if a longer string than expected was read using fscanf we could overwrite important data in memory 
    or cause a segmentation fault.
6.  With const char* parameter, we prevent changes to the string that parameter is pointing at through
    parameter (i.e. const pointers prevent changing the data pointed to The parameters for check (const char* word) 
    and load (const char* dictionary) are declared as const pointers because we want to prevent changes 
    to a read word and the dictionary we are using.